<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Eduardo Jr</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Eduardo Jr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Tue, 11 Aug 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Commits automáticos no GitHub com Travis CI!</title>
      <link>/2015/08/11/gh-pages-and-travis/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/08/11/gh-pages-and-travis/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;O &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; é um serviço web para hospedagem, gestão e compartilhamento de repositórios &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; que oferece diversos recursos, entre eles as &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; e intregração contínua, com &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;, por exemplo. As GitHub Pages são páginas web gerenciadas e renderizadas pelo próprio GitHub para que seus usuários possam exibir seus projetos de uma forma simples. Já a integração contínua com Travis realiza, essencialmente, teste de código. Em pacotes R, por exemplo, podemos ter o status do pacote que mostra se um &lt;em&gt;push&lt;/em&gt; para o repositório ainda o deixa sem erros, mas também podemos fazer mais com esse serviço, como veremos a seguir.&lt;/p&gt;
&lt;p&gt;Para criar uma GitHub Page é só criar um ramo com nome &lt;code&gt;gh-pages&lt;/code&gt; em seu projeto e adicionar a este arquivos com extensão &lt;code&gt;.html&lt;/code&gt;. Além dessa forma simples de criação, pode-se escolher diversos templates &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; (veja &lt;a href=&#34;http://jekyllthemes.org/&#34;&gt;link&lt;/a&gt;), pois as páginas são geradas pelo Jekyll. Neste post será abordada apenas a primeira opção. Já para utilizar o Travis CI, basta conectar-se ao serviço, pode ser através de seu conta no GitHub, habilitar a integração contínua ao seu repositório e incluir um arquivo &lt;code&gt;.travis.yml&lt;/code&gt; com as instruções que o servidor Travis deve seguir.&lt;/p&gt;
&lt;p&gt;Comumente nós, usuários de R, utilizamos o pacote &lt;a href=&#34;http://rmarkdown.rstudio.com/&#34;&gt;&lt;code&gt;rmarkdown&lt;/code&gt;&lt;/a&gt; para escrevermos nossos arquivos em MarkDown mesclando com códigos R e compilando para o formato &lt;code&gt;.hmtl&lt;/code&gt;. Pensando em uma rotina para criação das GitHub Pages, teríamos nosso ramo &lt;code&gt;master&lt;/code&gt; com o projeto e um ramo &lt;code&gt;gh-pages&lt;/code&gt; onde deixamos todos os &lt;code&gt;.html&lt;/code&gt; e demais arquivos gerados da compilação. Todavia esse trâmite de migrar entre ramos, compilar os arquivos, commitar os arquivos gerados pela compilação, etc. é demasiadamente entediante e cansativo. Então porque não automatizar?&lt;/p&gt;
&lt;p&gt;Para automatizar esse processo, de inclusão de arquivos gerados da compilação no ramo &lt;code&gt;gh-pages&lt;/code&gt;, vamos utilizar o serviço Travis CI conforme os passos a seguir:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/github2.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Habilite a integração contínua no seu repositório&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No site do &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;, serão listados todos os repositórios do GitHub dos quais se tem acesso. Habilite a integração contínua, conforme figura abaixo.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/travis1.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Gere uma chave de acesso ao seu repositório&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No GitHub há as permissões de acesso, isso faz com que pessoas não autorizadas não possam modificar um repositório sem permissão. Como o servidor Travis é análogo à um usuário sem acesso, devemos dar-lhe permissão para escrita no repositório. Isso é feito na página de &lt;em&gt;Configurações -&amp;gt; Personal access tokens&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/github1.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Ainda nessa página, ao criar uma nova chave de acesso, você escolherá o escopo que essa chave compreende. Para incluir os arquivos em um ramo apenas a primeira opção é necessária (na verdade apenas o terceiro item da primeira opção já será suficiente).&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/github2.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Concedida as permissões à chave, uma página que contém o código identificador MD5 dessa chave é gerado. Copie esse código, note o aviso, pois ele é verdadeiro, você não conseguirá visualizar novamente o código pelo GitHub.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/github3.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Crie uma variável de ambiente no Travis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O servidor Travis, ao executar a verificação do seu repositório, têm várias variáveis que são acessadas durante a verificação. Nesta etapa fazemos com que o Travis conheça a chave de acesso que geramos na etapa anterior.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/travis2.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Adicione os arquivos para compilação dos documentos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Agora já foram realizadas todas as etapas para que o Travis tenha acesso ao nosso repositório. Todavia ainda lhe falta a instrução sobre o que fazer neste repositório. Tome a estrutura de um repositório que já tenha um ramo &lt;code&gt;gh-pages&lt;/code&gt; e um ramo &lt;code&gt;master&lt;/code&gt; conforme abaixo:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;.
├── page-files
│   ├── cap01.Rmd
│   ├── cap02.Rmd
│   ├── cap03.Rmd
│   └── index.Rmd
└── README.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pois bem, listando os afazeres do Travis temos:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Compilar os arquivos &lt;code&gt;.Rmd&lt;/code&gt;.&lt;br /&gt;
A sugestão aqui é deixar os arquivos que fazem parte da sua página web em um diretório específico. Para facilitar os procedimentos posteriores. Para compilar esses arquivos sugere-se a criação de um script &lt;code&gt;.R&lt;/code&gt;, por exemplo &lt;code&gt;_render.R&lt;/code&gt; contendo o código:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Compila os Rmd

dirname &amp;lt;- &amp;quot;./page-files&amp;quot;
files &amp;lt;- grep(&amp;quot;.Rmd$&amp;quot;, dir(dirname), value = TRUE)
sapply(paste0(dirname, &amp;quot;/&amp;quot;, files), rmarkdown::render)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Commitar as mudanças no ramo &lt;code&gt;gh-pages&lt;/code&gt;.&lt;br /&gt;
Como o serviço Travis CI faz a verificação com servidores Linux, um script &lt;code&gt;bash&lt;/code&gt; é ideal para automatizar a rotina de commits. Em um arquivo &lt;code&gt;_deploy.sh&lt;/code&gt; faça:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/sh

git config --global user.email &amp;quot;edujrrib@gmail.com&amp;quot;
git config --global user.name &amp;quot;Travis boot&amp;quot;

git clone -b gh-pages https://${GIT_KEY}@github.com/${TRAVIS_REPO_SLUG}.git dir-tmp
cd dir-tmp
cp -r ../page-files/* ./
git add --all *
git commit -m &amp;quot;Atualização automática (travis build ${TRAVIS_BUILD_NUMBER})&amp;quot; || true
git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note que as porções do código com a sintaxe &lt;code&gt;${variavel}&lt;/code&gt; são as variáveis de ambiente do Travis CI. A &lt;code&gt;GIT_KEY&lt;/code&gt; refere-se ao código de acesso criado nas etapas anteriores, as demais variáveis são as criadas automaticamente pelo Travis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adicionar as instruções para o Travis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A verificação do Travis é realizada a partir das instruções colocadas em um arquivo &lt;code&gt;.travis.yml&lt;/code&gt;. Esse arquivo permite várias linguagens e várias definições, mais sobre como instruir o Travis a partir deste arquivo pode ser visto &lt;a href=&#34;https://docs.travis-ci.com/user/getting-started/&#34;&gt;aqui&lt;/a&gt;. No nosso caso o seguindo conteúdo será colocado nesse arquivo.&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;language: r

before_script:
  - chmod +x ./_deploy.sh

script:
  - Rscript -e &amp;quot;source(&amp;#39;_render.R&amp;#39;)&amp;quot;
  - ./_deploy.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em ordem esse arquivo diz:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A linguagem utilizada é R&lt;/li&gt;
&lt;li&gt;Antes do início da verificação é permita a execução do script bash&lt;/li&gt;
&lt;li&gt;O script de verificação:
&lt;ul&gt;
&lt;li&gt;Execute o &lt;code&gt;_render.R&lt;/code&gt; (gerando todos os arquivos para a página web).&lt;/li&gt;
&lt;li&gt;Execute o &lt;code&gt;_deploy.sh&lt;/code&gt; (clonando o repositório, adicionando os arquivos gerados e commitando-os).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Outro detalhe é que definindo a linguagem R, o Travis procurará um arquivo &lt;code&gt;DESCRIPTION&lt;/code&gt; para que se baixe as dependências necessárias para verificação, isso é feito pois a linguagem R no Travis é usada majoritariamente para verificação de pacotes R. Portanto no DESCRIPTION fazemos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Package: qualquer_nome
Title: Qualquer Titulo
Version: 0.0.1
Imports: rmarkdown&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora já podemos ficar despreocupados com a geração dos arquivos que farão parte da nossa página web, pois o Travis fará todo o trabalho sujo. Abaixo exibi-se a página do Travis após o build do repositório &lt;a href=&#34;https://github.com/JrEduardo/book-test&#34;&gt;book-test&lt;/a&gt;, que seguiu as especificações deste post.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/travis3.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;E abaixo temos a página inicial do ramo &lt;code&gt;gh-pages&lt;/code&gt; desse repositório. Note que a mensagem de commit é a qual definimos no arquivo &lt;code&gt;_deploy.R&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../../../post/images/github4.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;A página web gerada pelo GitHub fica hospedada no endereço &lt;code&gt;https://usuario.github.io/repositorio&lt;/code&gt;. A página criada para esse tutorial pode ser acessada em &lt;a href=&#34;https://jreduardo.github.io/book-test/&#34; class=&#34;uri&#34;&gt;https://jreduardo.github.io/book-test/&lt;/a&gt; (esse repositório sofrerá alterações, pois o usarei para outros testes).&lt;/p&gt;
&lt;p&gt;Ressalto que o material deste post foi motivado a partir da minha curiosidade sobre o funcionamento do pacote &lt;a href=&#34;https://bookdown.org/&#34;&gt;&lt;code&gt;bookdown&lt;/code&gt;&lt;/a&gt; e muito do que foi descrito aqui pode ser explorado também nos repositório Git do pacote (&lt;a href=&#34;http://github.com/rstudio/bookdown/&#34;&gt;rstudio/bookdown&lt;/a&gt;) e da demostração do pacote (&lt;a href=&#34;http://github.com/rstudio/bookdown-demo/&#34;&gt;rstudio/bookdown-demo&lt;/a&gt;).&lt;/p&gt;
&lt;!--------------------------------------------- --&gt;
</description>
    </item>
    
  </channel>
</rss>